% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main function.R
\name{network_bootstrap}
\alias{network_bootstrap}
\title{Parametric bootstrap inference in network formation models}
\usage{
network_bootstrap(
  y,
  X,
  N,
  bootstrap_time,
  index,
  data,
  link = "probit",
  beta_NULL = NULL
)
}
\arguments{
\item{y}{outcome variabe}

\item{X}{dependent variables}

\item{N}{size of the individuals}

\item{bootstrap_time}{number of the bootstrap times}

\item{index}{name of the import side and export side}

\item{data}{data which you want to apply}

\item{link}{probit or logit model}

\item{beta_NULL}{Null hyphothesis of the first covariate}
}
\value{
A list of fitted results is returned.
Within this outputted list, the following elements can be found:
\item{cof_mean}{estimated coefficients corrected by the mean of the bootstrap estimates.}
\item{cof_median}{estimated coefficients corrected by the median of the bootstrap estimates.}
\item{sd}{stand deviation form the bootstrap procedure.}
\item{cof_MLE}{estimated coefficients from Maximum Likelihood Estimates (MLE).}
\item{cof_bootstrap_all}{all bootstrap estimates.}
\item{cof_MLE_NULL}{Maximum Likelihood Estimates (MLE) of coefficients under the null hyphothesis.}
\item{cof_bootstrap_NULL}{Coefficient estimates from the bootstrap under the null hyphothesis.}
\item{log_likelihood_MLE}{Log-likelihood of the full model based on Maximum Likelihood Estimates (MLE).}
\item{log_likelihood_Bootstrap}{Log-likelihood of the full model using bootstrap estimates.}
\item{log_likelihood_MLE_NULL}{Log-likelihood of under the null hyphothesis based on MLE.}
\item{log_likelihood_Bootstrap_NULL}{Log-likelihood under the null hyphothesis using bootstrap estimates.}
\item{Hessian_MLE}{Inverse Hessian matrix for the full model (used for variance estimation).}
\item{Hessian_MLE_NULL}{Inverse Hessian matrix under the null hyphothesis.}
\item{X_origin}{Original design matrix used in the model, as a numeric matrix, which contains the dummy variable.}
}
\description{
R package 'NetBootstrap' is dedicated to do parametric bootstrap inference in network formation models.
}
\details{
Parametric bootstrap inference in network formation models
}
\examples{
rm(list = ls())
library(NetBootstrap)
generate the simulated data
N = 30
K = 1
beta = 1
alpha = rep(0, N)
gamma = rep(0, N)
dens_N_up = log(log(N))
dens_N_low = -log(log(N))
dens_T_up = log(log(N))
dens_T_low = -log(log(N))
for (i in seq(N)){
  alpha[i] = dens_N_low + ((i - 1) / ( N - 1)) * (dens_N_up - dens_N_low)
}
for (i in seq(N)){
  gamma[i] = dens_T_low + ((i - 1) / ( N - 1)) * (dens_T_up - dens_T_low)
}

Z = array(0, dim = c(N, N, K))
Y = matrix(0, nrow = N, ncol = N)
for (t in seq(N)) {
  for (i in seq(N)) {
    v_it = rnorm(1, 0, 1 / sqrt(2))
    epsi_it = rnorm(1, 0, 1)
    if ( t \%\% 2 == 0 & i \%\% 2 == 0){
      Z[i, t, ] = (1 - 2 * 1*(0)) * (1 - 2 * 1*(0))
    } else if(t \%\% 2 == 0 & i \%\% 2 == 1){
      Z[i, t, ] = (1 - 2 * 1*(1)) * (1 - 2 * 1*(0))
    } else if(t \%\% 2 == 1 & i \%\% 2 == 0){
      Z[i, t, ] = (1 - 2 * 1*(0)) * (1 - 2 * 1*(1))
    } else{
      Z[i, t, ] = (1 - 2 * 1*(1)) * (1 - 2 * 1*(1))
    }
    Y[i, t] = (beta * Z[i, t, ] + alpha[i] + gamma[t] > epsi_it)

  }
}


# final data
y = c(Y[!row(Y) == col(Y)])
X_in = matrix(0, N * N, K )
index_matrix = matrix(0, N * N, 2)
for (t in seq(N)) {
  for (i in seq(N)) {
    alpha_in = rep(0, N)
    gamma_in = rep(0, N)
    alpha_in[i] = 1
    gamma_in[t] = 1
    X_in[i + (t - 1) * N,] = c(Z[i,t,])
    index_matrix[i + (t - 1) * N,] = c(i,t)
  }
}
drop_index = NULL
for (i in seq(N)){
  drop_index = cbind(drop_index, i + (i - 1) * N)
}
X_design = as.matrix(X_in[-drop_index,])
index_in = index_matrix[-drop_index,]

# estimation procedure
data_in = data.frame(y = y, X = X_design, index = index_in)
index_name = colnames(data_in)[(K+2):(K+3)]
fit = network_bootstrap(y, X = X_design, N, bootstrap_time = 10, index = c('index.1', 'index.2'), data = data_in, link = 'probit', beta_NULL = NULL)

# get the results
est_MLE = fit$cof_MLE[1]
est_corrected = fit$cof[1]
sd = fit$sd

}
