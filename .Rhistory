network_bootstrap = function(y, X, N, bootstrap_time, data, index, link = 'probit'){
data = cbind(y = y, X = X, index[1] = data[,index[1]], index[2] = data[,index[2]])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(readxl)
library(NetBootstrap)
library(readstata13)
# Read the Stata file
data <- read.dta13("Log of Gravity.dta")
# Read the Stata file
data <- read.dta13("C:/Users/u0167326/OneDrive - KU Leuven/Desktop/PHD Research/Large panel data estimation/code/panel data estimate/Log of Gravity.dta")
###################################
simluated_num = 10
N = 136
y = as.numeric(data$trade != 0)
X = data[, c("ldist", "border", "comlang", "colony","comfrt")]
est = network_bootstrap(y, X, N, bootstrap_time = 10, data = data, index= c('s1_im', 's2_ex'))
library(readxl)
library(NetBootstrap)
library(readstata13)
# Read the Stata file
data <- read.dta13("C:/Users/u0167326/OneDrive - KU Leuven/Desktop/PHD Research/Large panel data estimation/code/panel data estimate/Log of Gravity.dta")
###################################
simluated_num = 10
N = 136
y = as.numeric(data$trade != 0)
X = data[, c("ldist", "border", "comlang", "colony","comfrt")]
est = network_bootstrap(y, X, N, bootstrap_time = 10, data = data, index= c('s1_im', 's2_ex'))
est
devtools::load_all(".")
devtools::load_all(".")
###################################################probit model network
N = 40
T = 40
T_seq = c(30)
bootstarp_time = 10 # bootstrap correction number
mle_num = 300 # whole repititions
Estimate_bias = matrix(0, length(T_seq), 4)
Estimate_bias_median = matrix(0, length(T_seq), 4)
percentile = matrix(0, length(T_seq), 4)
p_reject_ratio = matrix(0, length(T_seq), 4)
p_rej_ratio_without = matrix(0, length(T_seq), 4)
APE_estimate = matrix(0, length(T_seq), 4)
Estimate_deviation_boot = matrix(0, length(T_seq), 1)
Estimate_deviation = matrix(0, length(T_seq), 4)
APE_deviation = matrix(0, length(T_seq), 4)
Hessian_inv = matrix(0, length(T_seq), 1)
cov_MLE = matrix(0, length(T_seq), 1)
cov_jack = matrix(0, length(T_seq), 1)
boost_variance = matrix(0, length(T_seq), 1)
ratio_MLE = matrix(0, length(T_seq), 1)
ratio_b = matrix(0, length(T_seq), 1)
beta = 1
beta_NULL = 1
t_index = 1
K = 1
N = T
dens_N_up = log(log(N))
dens_N_low = -log(log(N))
dens_T_up = log(log(T))
dens_T_low = -log(log(T))
cof = NULL
cof_j = NULL
cof_constrain = NULL
cof_constrain_j = NULL
estimate_jack = NULL
alpha = rep(0, N)
gamma = rep(0, T)
#generate the simulated data
for (i in seq(N)){
alpha[i] = dens_N_low + ((i - 1) / ( N - 1)) * (dens_N_up - dens_N_low)
}
for (i in seq(T)){
gamma[i] = dens_T_low + ((i - 1) / ( T - 1)) * (dens_T_up - dens_T_low)
}
Z = array(0, dim = c(N, T, K))
Y = matrix(0, nrow = N, ncol = T)
for (t in seq(T)) {
for (i in seq(N)) {
v_it = rnorm(1, 0, 1 / sqrt(2))
epsi_it = rnorm(1, 0, 1)
if ( t %% 2 == 0 & i %% 2 == 0){
Z[i, t, ] = (1 - 2 * 1*(0)) * (1 - 2 * 1*(0))
} else if(t %% 2 == 0 & i %% 2 == 1){
Z[i, t, ] = (1 - 2 * 1*(1)) * (1 - 2 * 1*(0))
} else if(t %% 2 == 1 & i %% 2 == 0){
Z[i, t, ] = (1 - 2 * 1*(0)) * (1 - 2 * 1*(1))
} else{
Z[i, t, ] = (1 - 2 * 1*(1)) * (1 - 2 * 1*(1))
}
Y[i, t] = (beta * Z[i, t, ] + alpha[i] + gamma[t] > epsi_it)
}
}
y = c(Y[!row(Y) == col(Y)])
X_in = matrix(0, N * N, K )
index_matrix = matrix(0, N * N, 2)
# Z = array(0,dim = c(N,N,K))
for (t in seq(N)) {
for (i in seq(N)) {
alpha_in = rep(0, N)
gamma_in = rep(0, N)
alpha_in[i] = 1
gamma_in[t] = 1
X_in[i + (t - 1) * N,] = c(Z[i,t,])
index_matrix[i + (t - 1) * N,] = c(i,t)
}
}
drop_index = NULL
for (i in seq(N)){
drop_index = cbind(drop_index, i + (i - 1) * N)
}
X_design = as.matrix(X_in[-drop_index,])
index_in = index_matrix[-drop_index,]
data_in = data.frame(y = y, X = X_design, index = index_in)
fit = network_bootstrap(y, X = X_design, N, bootstrap_time = 10, index = c('index.1', 'index.2'), data = data_in, link = 'probit', beta_NULL = NULL)
ratio_MLE = 2 * (fit$log_likelihood_MLE - fit$log_likelihood_MLE_NULL)
ratio_bootstrap = 2 * (fit$log_likelihood_Bootstrap - fit$log_likelihood_Bootstrap_NULL)
median_bias = median(fit$cof_bootstrap_all[,1]) - fit$cof_MLE[1]
mean_bias = mean(fit$cof_bootstrap_all[,1]) - fit$cof_MLE[1]
MLE_estimate = fit$cof_MLE[1]
fit$cof_MLE[2] = sum( fit$cof_MLE[52:101] ) - sum(fit$cof_MLE[3:51])
bias_all = as.matrix(fit$cof_MLE - c(beta, alpha, gamma))
Medain_bootstrap_estimate = MLE_estimate - median_bias
Mean_bootstrap_estimate = MLE_estimate - mean_bias
jack_estimate = MLE_estimate
bootstrap_estimate = fit$cof_bootstrap_all[,1]
se_MLE = sqrt(fit$Hessian_MLE[1,1])
se_bootstrap = sd(bootstrap_estimate)
if (MLE_estimate  - quantile(fit$cof_bootstrap_all[,1] - MLE_estimate, 0.975) <= beta & beta <= MLE_estimate  - quantile(fit$cof_bootstrap_all[,1] - MLE_estimate, 0.025)){
p_cover_bootstrap  =  1
}else{
p_cover_bootstrap  =  0
}
if (MLE_estimate  - 1.96*se_MLE <= beta & beta <= MLE_estimate  + 1.96*se_MLE ){
p_cover_MLE  =  1
}else{
p_cover_MLE  =  0
}
if (ratio_MLE >= quantile(ratio_bootstrap, 0.95) ){
p_rej_ratio_bootstrap = 1
}else{
p_rej_ratio_bootstrap = 0
}
non_central_parameter = (mean_bias) * (se_bootstrap^2)^(-1) * (mean_bias)
quantile_value <- qchisq(0.95, 1, ncp = non_central_parameter)
if (ratio_MLE >= quantile_value ){
p_rej_ratio_without = 1
}else{
p_rej_ratio_without = 0
}
APE_true = matrix(0, nrow = N, ncol = T)
APE_jack = matrix(0, nrow = N, ncol = T)
APE_MLE = matrix(0, nrow = N, ncol = T)
APE_mean = matrix(0, nrow = N, ncol = T)
APE_median = matrix(0, nrow = N, ncol = T)
##################################calculate APE
for (i in seq(N)){
for ( j in seq(T)){
APE_true[i, j] = pnorm(beta + alpha[i] + gamma[j]) - pnorm(-beta + alpha[i] + gamma[j])/2
#APE_jack[i, j] = pnorm(jack_estimate + alpha[i] + gamma[j]) - pnorm(-jack_estimate + alpha[i] + gamma[j])
APE_MLE[i, j] = pnorm(MLE_estimate  + alpha[i] + gamma[j]) - pnorm(-MLE_estimate  + alpha[i] + gamma[j])/2
APE_mean[i, j] = pnorm(Mean_bootstrap_estimate  + alpha[i] + gamma[j]) - pnorm(-Mean_bootstrap_estimate  + alpha[i] + gamma[j])/2
APE_median[i, j] = pnorm(Medain_bootstrap_estimate  + alpha[i] + gamma[j]) - pnorm(-Medain_bootstrap_estimate  + alpha[i] + gamma[j])/2
}
}
APE_se_formula = c()
fit$cof_MLE[2] = 0
cov_sum_1 = fit$X_origin[,1] * fit$cof_MLE[1]
cov_sum_2 = fit$X_origin[,-1] %*% fit$cof_MLE[-1]
cov_APE = matrix(fit$cof_MLE[1] + fit$X_origin[,-1] %*% fit$cof_MLE[-1], N-1, N)
cov_APE_minus = matrix(-fit$cof_MLE[1] + fit$X_origin[,-1] %*% fit$cof_MLE[-1], N-1, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N-1, N)
cov_APE = shift_lower_triangle_and_add_zero_diag(cov_APE)
cov_APE_minus = shift_lower_triangle_and_add_zero_diag(cov_APE_minus)
cov_sum = shift_lower_triangle_and_add_zero_diag(cov_sum)
X_in = Z[,,1]
APE_se_formula = cbind(APE_se_formula, APE_se(X = X_in, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_MLE ))
M_B_e = fit$cof_MLE - ( colMeans(fit$cof_bootstrap_all) - fit$cof_MLE)
M_B_e[2] = 0
cov_sum_1 = fit$X_origin[,1] * M_B_e[1]
cov_sum_2 = fit$X_origin[,-1] %*% M_B_e[-1]
cov_APE = matrix(M_B_e[1] + fit$X_origin[,-1] %*% M_B_e[-1], N, N)
cov_APE_minus = matrix(-M_B_e[1] + fit$X_origin[,-1] %*% M_B_e[-1], N, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N, N)
APE_se_formula = cbind(APE_se_formula, APE_se(X = Z, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_mean))
APE_se_formula = cbind(APE_se_formula, APE_se(X = X_in, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_MLE ))
M_B_e = fit$cof_MLE - ( colMeans(fit$cof_bootstrap_all) - fit$cof_MLE)
M_B_e[2] = 0
M_B_e = fit$cof_MLE - ( colMeans(fit$cof_bootstrap_all) - fit$cof_MLE)
M_B_e[2] = 0
cov_sum_1 = fit$X_origin[,1] * M_B_e[1]
cov_sum_2 = fit$X_origin[,-1] %*% M_B_e[-1]
cov_APE = matrix(M_B_e[1] + fit$X_origin[,-1] %*% M_B_e[-1], N-1, N)
cov_APE_minus = matrix(-M_B_e[1] + fit$X_origin[,-1] %*% M_B_e[-1], N-1, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N-1, N)
cov_APE = shift_lower_triangle_and_add_zero_diag(cov_APE)
cov_APE_minus = shift_lower_triangle_and_add_zero_diag(cov_APE_minus)
cov_sum = shift_lower_triangle_and_add_zero_diag(cov_sum)
X_in = Z[,,1]
APE_se_formula = cbind(APE_se_formula, APE_se(X = X_in, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_MLE ))
MD_B_e = fit$cof_MLE - ( apply(fit$cof_bootstrap_all,2, median) - fit$cof_MLE)
MD_B_e[2] = 0
cov_sum_1 = fit$X_origin[,1] * MD_B_e[1]
cov_sum_2 = fit$X_origin[,-1] %*% MD_B_e[-1]
cov_APE = matrix(MD_B_e[1] + fit$X_origin[,-1] %*% MD_B_e[-1], N-1, N)
cov_APE_minus = matrix(-MD_B_e[1] + fit$X_origin[,-1] %*% MD_B_e[-1], N-1, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N-1, N)
cov_APE = shift_lower_triangle_and_add_zero_diag(cov_APE)
cov_APE_minus = shift_lower_triangle_and_add_zero_diag(cov_APE_minus)
cov_sum = shift_lower_triangle_and_add_zero_diag(cov_sum)
X_in = Z[,,1]
APE_se_formula = cbind(APE_se_formula, APE_se(X = X_in, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_MLE ))
results = list( MLE_estimate = MLE_estimate, Mean_bootstrap_estimate  = Mean_bootstrap_estimate , Medain_bootstrap_estimate = Medain_bootstrap_estimate, jack_estimate = jack_estimate, bootstrap_estimate = bootstrap_estimate,
bootstrap_estimate_low = quantile(bootstrap_estimate - MLE_estimate, 0.025), bootstrap_estimate_up = quantile(bootstrap_estimate - MLE_estimate, 0.975),
cov_var_MLE = fit$Hessian_MLE[1,1], cov_var_jack = fit$Hessian_MLE[1,1],
APE_true = mean(APE_true[!row(APE_true) == col(APE_true)]), APE_jack = mean(APE_jack[!row(APE_jack) == col(APE_jack)]), APE_MLE = mean(APE_MLE[!row(APE_MLE) == col(APE_MLE)]), APE_mean = mean(APE_mean[!row(APE_mean) == col(APE_mean)]), APE_median = mean(APE_median[!row(APE_median) == col(APE_median)]),
ratio_MLE = ratio_MLE, ratio_bootstrap = ratio_bootstrap,
p_cover_MLE = p_cover_MLE, p_cover_bootstrap = p_cover_bootstrap, p_cover_jack = p_cover_MLE,
p_rej_ratio_bootstrap = p_rej_ratio_bootstrap, p_rej_ratio_without = p_rej_ratio_without,
APE_se_formula = APE_se_formula)
devtools::load_all(".")
