N = 136
y = as.numeric(data$trade != 0)
X = data[, c("ldist", "border", "comlang", "colony","comfrt")]
est = network_bootstrap(y, X, N, bootstrap_time = 10, data = data, index= c('s1_im', 's2_ex'))
est
devtools::load_all(".")
devtools::load_all(".")
###################################################probit model network
N = 40
T = 40
T_seq = c(30)
bootstarp_time = 10 # bootstrap correction number
mle_num = 300 # whole repititions
Estimate_bias = matrix(0, length(T_seq), 4)
Estimate_bias_median = matrix(0, length(T_seq), 4)
percentile = matrix(0, length(T_seq), 4)
p_reject_ratio = matrix(0, length(T_seq), 4)
p_rej_ratio_without = matrix(0, length(T_seq), 4)
APE_estimate = matrix(0, length(T_seq), 4)
Estimate_deviation_boot = matrix(0, length(T_seq), 1)
Estimate_deviation = matrix(0, length(T_seq), 4)
APE_deviation = matrix(0, length(T_seq), 4)
Hessian_inv = matrix(0, length(T_seq), 1)
cov_MLE = matrix(0, length(T_seq), 1)
cov_jack = matrix(0, length(T_seq), 1)
boost_variance = matrix(0, length(T_seq), 1)
ratio_MLE = matrix(0, length(T_seq), 1)
ratio_b = matrix(0, length(T_seq), 1)
beta = 1
beta_NULL = 1
t_index = 1
K = 1
N = T
dens_N_up = log(log(N))
dens_N_low = -log(log(N))
dens_T_up = log(log(T))
dens_T_low = -log(log(T))
cof = NULL
cof_j = NULL
cof_constrain = NULL
cof_constrain_j = NULL
estimate_jack = NULL
alpha = rep(0, N)
gamma = rep(0, T)
#generate the simulated data
for (i in seq(N)){
alpha[i] = dens_N_low + ((i - 1) / ( N - 1)) * (dens_N_up - dens_N_low)
}
for (i in seq(T)){
gamma[i] = dens_T_low + ((i - 1) / ( T - 1)) * (dens_T_up - dens_T_low)
}
Z = array(0, dim = c(N, T, K))
Y = matrix(0, nrow = N, ncol = T)
for (t in seq(T)) {
for (i in seq(N)) {
v_it = rnorm(1, 0, 1 / sqrt(2))
epsi_it = rnorm(1, 0, 1)
if ( t %% 2 == 0 & i %% 2 == 0){
Z[i, t, ] = (1 - 2 * 1*(0)) * (1 - 2 * 1*(0))
} else if(t %% 2 == 0 & i %% 2 == 1){
Z[i, t, ] = (1 - 2 * 1*(1)) * (1 - 2 * 1*(0))
} else if(t %% 2 == 1 & i %% 2 == 0){
Z[i, t, ] = (1 - 2 * 1*(0)) * (1 - 2 * 1*(1))
} else{
Z[i, t, ] = (1 - 2 * 1*(1)) * (1 - 2 * 1*(1))
}
Y[i, t] = (beta * Z[i, t, ] + alpha[i] + gamma[t] > epsi_it)
}
}
y = c(Y[!row(Y) == col(Y)])
X_in = matrix(0, N * N, K )
index_matrix = matrix(0, N * N, 2)
# Z = array(0,dim = c(N,N,K))
for (t in seq(N)) {
for (i in seq(N)) {
alpha_in = rep(0, N)
gamma_in = rep(0, N)
alpha_in[i] = 1
gamma_in[t] = 1
X_in[i + (t - 1) * N,] = c(Z[i,t,])
index_matrix[i + (t - 1) * N,] = c(i,t)
}
}
drop_index = NULL
for (i in seq(N)){
drop_index = cbind(drop_index, i + (i - 1) * N)
}
X_design = as.matrix(X_in[-drop_index,])
index_in = index_matrix[-drop_index,]
data_in = data.frame(y = y, X = X_design, index = index_in)
fit = network_bootstrap(y, X = X_design, N, bootstrap_time = 10, index = c('index.1', 'index.2'), data = data_in, link = 'probit', beta_NULL = NULL)
ratio_MLE = 2 * (fit$log_likelihood_MLE - fit$log_likelihood_MLE_NULL)
ratio_bootstrap = 2 * (fit$log_likelihood_Bootstrap - fit$log_likelihood_Bootstrap_NULL)
median_bias = median(fit$cof_bootstrap_all[,1]) - fit$cof_MLE[1]
mean_bias = mean(fit$cof_bootstrap_all[,1]) - fit$cof_MLE[1]
MLE_estimate = fit$cof_MLE[1]
fit$cof_MLE[2] = sum( fit$cof_MLE[52:101] ) - sum(fit$cof_MLE[3:51])
bias_all = as.matrix(fit$cof_MLE - c(beta, alpha, gamma))
Medain_bootstrap_estimate = MLE_estimate - median_bias
Mean_bootstrap_estimate = MLE_estimate - mean_bias
jack_estimate = MLE_estimate
bootstrap_estimate = fit$cof_bootstrap_all[,1]
se_MLE = sqrt(fit$Hessian_MLE[1,1])
se_bootstrap = sd(bootstrap_estimate)
if (MLE_estimate  - quantile(fit$cof_bootstrap_all[,1] - MLE_estimate, 0.975) <= beta & beta <= MLE_estimate  - quantile(fit$cof_bootstrap_all[,1] - MLE_estimate, 0.025)){
p_cover_bootstrap  =  1
}else{
p_cover_bootstrap  =  0
}
if (MLE_estimate  - 1.96*se_MLE <= beta & beta <= MLE_estimate  + 1.96*se_MLE ){
p_cover_MLE  =  1
}else{
p_cover_MLE  =  0
}
if (ratio_MLE >= quantile(ratio_bootstrap, 0.95) ){
p_rej_ratio_bootstrap = 1
}else{
p_rej_ratio_bootstrap = 0
}
non_central_parameter = (mean_bias) * (se_bootstrap^2)^(-1) * (mean_bias)
quantile_value <- qchisq(0.95, 1, ncp = non_central_parameter)
if (ratio_MLE >= quantile_value ){
p_rej_ratio_without = 1
}else{
p_rej_ratio_without = 0
}
APE_true = matrix(0, nrow = N, ncol = T)
APE_jack = matrix(0, nrow = N, ncol = T)
APE_MLE = matrix(0, nrow = N, ncol = T)
APE_mean = matrix(0, nrow = N, ncol = T)
APE_median = matrix(0, nrow = N, ncol = T)
##################################calculate APE
for (i in seq(N)){
for ( j in seq(T)){
APE_true[i, j] = pnorm(beta + alpha[i] + gamma[j]) - pnorm(-beta + alpha[i] + gamma[j])/2
#APE_jack[i, j] = pnorm(jack_estimate + alpha[i] + gamma[j]) - pnorm(-jack_estimate + alpha[i] + gamma[j])
APE_MLE[i, j] = pnorm(MLE_estimate  + alpha[i] + gamma[j]) - pnorm(-MLE_estimate  + alpha[i] + gamma[j])/2
APE_mean[i, j] = pnorm(Mean_bootstrap_estimate  + alpha[i] + gamma[j]) - pnorm(-Mean_bootstrap_estimate  + alpha[i] + gamma[j])/2
APE_median[i, j] = pnorm(Medain_bootstrap_estimate  + alpha[i] + gamma[j]) - pnorm(-Medain_bootstrap_estimate  + alpha[i] + gamma[j])/2
}
}
APE_se_formula = c()
fit$cof_MLE[2] = 0
cov_sum_1 = fit$X_origin[,1] * fit$cof_MLE[1]
cov_sum_2 = fit$X_origin[,-1] %*% fit$cof_MLE[-1]
cov_APE = matrix(fit$cof_MLE[1] + fit$X_origin[,-1] %*% fit$cof_MLE[-1], N-1, N)
cov_APE_minus = matrix(-fit$cof_MLE[1] + fit$X_origin[,-1] %*% fit$cof_MLE[-1], N-1, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N-1, N)
cov_APE = shift_lower_triangle_and_add_zero_diag(cov_APE)
cov_APE_minus = shift_lower_triangle_and_add_zero_diag(cov_APE_minus)
cov_sum = shift_lower_triangle_and_add_zero_diag(cov_sum)
X_in = Z[,,1]
APE_se_formula = cbind(APE_se_formula, APE_se(X = X_in, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_MLE ))
M_B_e = fit$cof_MLE - ( colMeans(fit$cof_bootstrap_all) - fit$cof_MLE)
M_B_e[2] = 0
cov_sum_1 = fit$X_origin[,1] * M_B_e[1]
cov_sum_2 = fit$X_origin[,-1] %*% M_B_e[-1]
cov_APE = matrix(M_B_e[1] + fit$X_origin[,-1] %*% M_B_e[-1], N, N)
cov_APE_minus = matrix(-M_B_e[1] + fit$X_origin[,-1] %*% M_B_e[-1], N, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N, N)
APE_se_formula = cbind(APE_se_formula, APE_se(X = Z, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_mean))
APE_se_formula = cbind(APE_se_formula, APE_se(X = X_in, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_MLE ))
M_B_e = fit$cof_MLE - ( colMeans(fit$cof_bootstrap_all) - fit$cof_MLE)
M_B_e[2] = 0
M_B_e = fit$cof_MLE - ( colMeans(fit$cof_bootstrap_all) - fit$cof_MLE)
M_B_e[2] = 0
cov_sum_1 = fit$X_origin[,1] * M_B_e[1]
cov_sum_2 = fit$X_origin[,-1] %*% M_B_e[-1]
cov_APE = matrix(M_B_e[1] + fit$X_origin[,-1] %*% M_B_e[-1], N-1, N)
cov_APE_minus = matrix(-M_B_e[1] + fit$X_origin[,-1] %*% M_B_e[-1], N-1, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N-1, N)
cov_APE = shift_lower_triangle_and_add_zero_diag(cov_APE)
cov_APE_minus = shift_lower_triangle_and_add_zero_diag(cov_APE_minus)
cov_sum = shift_lower_triangle_and_add_zero_diag(cov_sum)
X_in = Z[,,1]
APE_se_formula = cbind(APE_se_formula, APE_se(X = X_in, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_MLE ))
MD_B_e = fit$cof_MLE - ( apply(fit$cof_bootstrap_all,2, median) - fit$cof_MLE)
MD_B_e[2] = 0
cov_sum_1 = fit$X_origin[,1] * MD_B_e[1]
cov_sum_2 = fit$X_origin[,-1] %*% MD_B_e[-1]
cov_APE = matrix(MD_B_e[1] + fit$X_origin[,-1] %*% MD_B_e[-1], N-1, N)
cov_APE_minus = matrix(-MD_B_e[1] + fit$X_origin[,-1] %*% MD_B_e[-1], N-1, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N-1, N)
cov_APE = shift_lower_triangle_and_add_zero_diag(cov_APE)
cov_APE_minus = shift_lower_triangle_and_add_zero_diag(cov_APE_minus)
cov_sum = shift_lower_triangle_and_add_zero_diag(cov_sum)
X_in = Z[,,1]
APE_se_formula = cbind(APE_se_formula, APE_se(X = X_in, y = Y, cov_APE, cov_APE_minus, cov_sum, APE_MLE ))
results = list( MLE_estimate = MLE_estimate, Mean_bootstrap_estimate  = Mean_bootstrap_estimate , Medain_bootstrap_estimate = Medain_bootstrap_estimate, jack_estimate = jack_estimate, bootstrap_estimate = bootstrap_estimate,
bootstrap_estimate_low = quantile(bootstrap_estimate - MLE_estimate, 0.025), bootstrap_estimate_up = quantile(bootstrap_estimate - MLE_estimate, 0.975),
cov_var_MLE = fit$Hessian_MLE[1,1], cov_var_jack = fit$Hessian_MLE[1,1],
APE_true = mean(APE_true[!row(APE_true) == col(APE_true)]), APE_jack = mean(APE_jack[!row(APE_jack) == col(APE_jack)]), APE_MLE = mean(APE_MLE[!row(APE_MLE) == col(APE_MLE)]), APE_mean = mean(APE_mean[!row(APE_mean) == col(APE_mean)]), APE_median = mean(APE_median[!row(APE_median) == col(APE_median)]),
ratio_MLE = ratio_MLE, ratio_bootstrap = ratio_bootstrap,
p_cover_MLE = p_cover_MLE, p_cover_bootstrap = p_cover_bootstrap, p_cover_jack = p_cover_MLE,
p_rej_ratio_bootstrap = p_rej_ratio_bootstrap, p_rej_ratio_without = p_rej_ratio_without,
APE_se_formula = APE_se_formula)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
#' @export
#'
APE_se = function(fit, X, y, cov_APE, cov_APE_minus, cov_sum, APE_MLE, model = 'probit'){
Z = DGP$X_original
cov_sum_1 = fit$X_origin[,1] * fit$cof_MLE[1]
cov_sum_2 = fit$X_origin[,-1] %*% fit$cof_MLE[-1]
cov_APE = matrix(fit$cof_MLE[1] + fit$X_origin[,-1] %*% fit$cof_MLE[-1], N-1, N)
cov_APE_minus = matrix(-fit$cof_MLE[1] + fit$X_origin[,-1] %*% fit$cof_MLE[-1], N-1, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N-1, N)
cov_APE = shift_lower_triangle_and_add_zero_diag(cov_APE)
cov_APE_minus = shift_lower_triangle_and_add_zero_diag(cov_APE_minus)
cov_sum = shift_lower_triangle_and_add_zero_diag(cov_sum)
cov_sum[row(cov_sum) == col(cov_sum)] = 0
cov_APE[row(cov_APE) == col(cov_APE)] = 0
cov_APE_minus[row(cov_APE_minus) == col(cov_APE_minus)] = 0
XB_pi <- cov_sum
Phi_XB <- pnorm(cov_sum)  # CDF (Φ(Xβ))
phi_XB <- dnorm(cov_sum)  # PDF (φ(Xβ))
Phi_XB <- pmax(Phi_XB, 1e-9)
Phi_XB <- pmin(Phi_XB, 1 - 1e-9)
# preparation for ingredients
# d_fix_loss = y - exp(cov_sum)/( 1 + exp(cov_sum))
d_fix_loss = - (phi_XB * (y - Phi_XB) / (Phi_XB * (1 - Phi_XB)))
#d_fix_2_loss = - exp(cov_sum)/( 1 + exp(cov_sum))^2
d_fix_2_loss = (-cov_sum*phi_XB  *Phi_XB * ( 1 -Phi_XB ) - phi_XB*(1-2*Phi_XB)*phi_XB)*(y-Phi_XB)/((Phi_XB*(1-Phi_XB)))^2 - phi_XB^2  / ((Phi_XB*(1-Phi_XB)))
# d_beta_loss = X * (y - exp(cov_sum)/( 1 + exp(cov_sum)))
d_beta_loss = -X * (phi_XB * (y - Phi_XB) / (Phi_XB * (1 - Phi_XB)))
# d_beta_beta_loss = X * (- exp(cov_sum)/( 1 + exp(cov_sum))^2) * X
d_beta_beta_loss = (-cov_sum*phi_XB * X *Phi_XB * ( 1 -Phi_XB ) - phi_XB*(1-2*Phi_XB)*X*phi_XB)*(y-Phi_XB)/((Phi_XB*(1-Phi_XB)))^2 - X * phi_XB^2 * X / ((Phi_XB*(1-Phi_XB)))
# d_beta_fix_loss = X * ( - exp(cov_sum)/( 1 + exp(cov_sum))^2)
d_beta_fix_loss = (-cov_sum*phi_XB * X *Phi_XB * ( 1 -Phi_XB ) - phi_XB*(1-2*Phi_XB)*phi_XB)*(y-Phi_XB)/((Phi_XB*(1-Phi_XB)))^2 - X * phi_XB^2  / ((Phi_XB*(1-Phi_XB)))
d_fix_APE =  (1/sqrt(2*pi) * exp( -cov_APE^2 / 2 ) - 1/sqrt(2*pi) * exp( -cov_APE_minus^2 / 2 ))/2
d_beta_APE = (1/sqrt(2*pi) * exp( -cov_APE^2 / 2 ) + 1/sqrt(2*pi) * exp( -cov_APE_minus^2 / 2 ))/2
# Hessian matrix
H_a_a = -diag(rowSums(d_fix_2_loss))/sqrt(N*(N-1))
H_g_g = -diag(colSums(d_fix_2_loss))/sqrt(N*(N-1))
H_a_g = -d_fix_2_loss/sqrt(N*(N-1))
Hessian_bar =   cbind(rbind(H_a_a, t(H_a_g)), rbind(H_a_g, H_g_g))  + c(rep(1,N), rep(-1,N)) %*% t( c(rep(1,N), rep(-1,N)) )/sqrt(N*(N-1))
Hessain_inverse = solve(Hessian_bar)
Hessian_a_a = Hessain_inverse[1:(N), 1:(N)]
Hessian_g_a = Hessain_inverse[(N+1):(N+N), 1:(N)]
Hessian_a_g = Hessain_inverse[1:(N), (N+1):(N+N)]
Hessian_g_g = Hessain_inverse[(N+1):(N+N), (N+1):(N+N)]
# the matrix
the = matrix(0,N,N)
for (i in 1:N) {
for (j in 1:N) {
the[i,j] = -(sum(Hessian_a_a[i,]*colSums(d_beta_fix_loss)) +
sum(Hessian_g_a[j,]*colSums(d_beta_fix_loss)) +
sum(Hessian_a_g[i,]*rowSums(d_beta_fix_loss)) +
sum(Hessian_g_g[j,]*rowSums(d_beta_fix_loss)))/sqrt(N*(N-1))
}
}
# W_infity
W_bar =  -(1 / sqrt((N)*N)) * sum(  d_beta_beta_loss  - d_fix_2_loss * the * the  )
# phi matrix
phi = matrix(0, N, N)
for (i in 1:(N)) {
for (j in 1:N) {
phi[i,j] = -(sum(Hessian_a_a[i,]*colSums(d_fix_APE)) +
sum(Hessian_g_a[j,]*colSums(d_fix_APE)) +
sum(Hessian_a_g[i,]*rowSums(d_fix_APE)) +
sum(Hessian_g_g[j,]*rowSums(d_fix_APE)))/sqrt(N*(N-1))
}
}
D_beta_delta = (1/((N-1)*N)) * sum( d_beta_APE - the * d_fix_APE)
D_beta_loss = d_beta_loss - d_fix_loss*the
D_beta_dix_loss = d_beta_fix_loss - d_fix_2_loss*the
tau = as.numeric(D_beta_delta * solve(W_bar)) * D_beta_loss - phi * d_fix_loss
APE_residual = APE_MLE - colMeans(APE_MLE)
part_1 = sum(APE_residual%*%APE_residual)
part_2 = compute_sum(APE_residual)
part_3 = sum(tau*tau)
return( sqrt((part_1 + part_2 + part_3)/(N^2*(N-1)^2)) )
}
#'
network_bootstrap = function(y, X, N, bootstrap_time, index, data, link = 'probit', beta_NULL = NULL){
data = data.frame(y = y, X = X, data[,index[1]], data[,index[2]])
K = dim(X)[2]
# order the data
if(is.null(colnames(X)) == 1){
colnames(data)[(dim(data)[2]-1):dim(data)[2]] = index
data = data[order(data[,index[2]], data[,index[1]]),]
p = dim(X)[2]
y = data$y
if (p==1){
X = data[,2]
}else{
X = data[,(2:p+1)]
}
}else{
colnames(data) = c('y', colnames(X), index)
data = data[order(data[,index[2]], data[,index[1]]),]
p = dim(X)[2]
y = data$y
X = data[,colnames(X)]
}
# add dummy variable
fix_effect = matrix(0, N*N, N + N )
for (t in seq(N)) {
for (i in seq(N)) {
alpha_in = rep(0, N)
gamma_in = rep(0, N)
alpha_in[i] = 1
gamma_in[t] = 1
fix_effect[i + (t - 1) * N,] = c(alpha_in - alpha_in[1], gamma_in + alpha_in[1])
}
}
drop_index = NULL
for (i in seq(N)){
drop_index = cbind(drop_index, i + (i - 1) * N)
}
fix = fix_effect[-drop_index,]
# prepare teh final data
X_design = cbind(X, fix)
X_design = apply(X_design, 2, as.numeric)
data_in <- data.frame(y = y, X = X_design)
if (sum(y) <= N*N*0.01){
return(NULL)
}
# MLE
model <-
speedglm(y ~ . - 1, data = data_in, family = binomial(link = link))
fit = summary(model)
Hessian_inv = vcov(model)
cof = unlist(as.list(fit$coefficients[, 1]))
log_likelihood_estimate <- logLik(model)
cof[K+1] = sum(cof[(N+K+1):(N+N+K)]) - sum(cof[(K+2):(N+K)])
# constrained MLE
data_2 = data_in
if(is.null(beta_NULL) != 1){
formula <- as.formula( paste("y ~ -1 +", paste(colnames(data_2[,-2])[-1], collapse = " + "), "+ offset(offset_term)"))
data_2$offset_term <- beta_NULL * X_design[,1]
model_NULL <-
glm(formula = formula, data = data_2, family=binomial(link = link))
fit_NULL = summary(model_NULL)
Hessian_inv_NULL = vcov(model_NULL)
cof_NULL =  c(beta_NULL, NA, unlist(as.list(fit_NULL$coefficients[, 1])))
log_likelihood_estimate_NULL <- logLik(model_NULL)
}
# prepare for bootstrap
cof_B = NULL
log_likelihood_estimate_B = NULL
cof_B_NULL = NULL
log_likelihood_estimate_B_NULL = NULL
X_design = apply(X_design, 2, as.numeric)
# bootstrap procedure
for (k in seq(bootstrap_time)) {
set.seed(k)
epsi_it = rnorm(length(y), 0, 1)
Y = as.numeric(X_design %*% cof > epsi_it)
data_boostrap <- data.frame(y = Y, X = X_design)
model_B <-
speedglm(y ~ . - 1, data = data_boostrap, family = binomial(link = link), start = cof)
fit_B = summary(model_B)
cof_B = rbind(cof_B, unlist(as.list(fit_B$coefficients[, 1])))
log_likelihood_estimate_B <- rbind(log_likelihood_estimate_B, logLik(model_B))
# constrained
data_2 = data_boostrap
if(is.null(beta_NULL) != 1){
formula <- as.formula( paste("y ~ -1 +", paste(colnames(data_2[,-2])[-1], collapse = " + "), "+ offset(offset_term)"))
data_2$offset_term <- cof[1] * X_design[,1]
model_B_NULL <-
speedglm(formula = formula, data = data_2, family=binomial(link = link))
fit_B_NULL = summary(model_B_NULL)
cof_B_NULL = rbind(cof_B_NULL, c(beta_NULL, NA, unlist(as.list(fit_B_NULL$coefficients[, 1]))))
log_likelihood_estimate_B_NULL <- rbind(log_likelihood_estimate_B_NULL, logLik(model_B_NULL))
}
}
# get the final results
cof_B[,K+1] = apply(cof_B[,(N+K+1):(N+N+K)],1,sum) - apply(cof_B[,(K+2):(N+K)],1,sum)
cof_boost_mean = apply(cof_B, 2, mean)
cof_boost_median = apply(cof_B, 2, median)
est_correct_mean = cof - (cof_boost_mean - cof)
est_correct_median = cof - (cof_boost_median - cof)
est_correct_mean[K+1] = sum(est_correct_mean[(N+K+1):(N+N+K)]) - sum(est_correct_mean[(K+2):(N+K)])
est_correct_median[K+1] = sum(est_correct_median[(N+K+1):(N+N+K)]) - sum(est_correct_median[(K+2):(N+K)])
if (K == 1){
boostrap_sd = sd(cof_B[,1:K])
}
else{
boostrap_sd = apply(cof_B[,1:K],2,sd)
}
if(is.null(beta_NULL) != 1){
res = list(cof_MLE = cof, cof_mean = est_correct_mean, cof_median = est_correct_median, sd = boostrap_sd,
cof_bootstrap_all = cof_B, cof_MLE_NULL = cof_NULL, cof_bootstrap_NULL = cof_B_NULL,
log_likelihood_MLE = log_likelihood_estimate, log_likelihood_Bootstrap = log_likelihood_estimate_B,
log_likelihood_MLE_NULL = log_likelihood_estimate_NULL, log_likelihood_Bootstrap_NULL = log_likelihood_estimate_B_NULL,
Hessian_MLE = Hessian_inv, Hessian_MLE_NULL = Hessian_inv_NULL, X_origin = as.matrix(X_design), data = data
)
}
else{
res = list(cof_MLE = cof, cof_mean = est_correct_mean, cof_median = est_correct_median, sd = boostrap_sd, cof_bootstrap_all = cof_B,
log_likelihood_MLE = log_likelihood_estimate, log_likelihood_Bootstrap = log_likelihood_estimate_B,
Hessian_MLE = Hessian_inv, X_origin = as.matrix(X_design), data = data
)
}
return(res)
}
#' @export
#'
APE_se = function(fit, est, N, X, y, APE, model = 'probit'){
cov_sum_1 = fit$X_origin[,1] * est[1]
cov_sum_2 = fit$X_origin[,-1] %*% est[-1]
cov_APE = matrix(est[1] + fit$X_origin[,-1] %*% est[-1], N-1, N)
cov_APE_minus = matrix(-est[1] + fit$X_origin[,-1] %*% est[-1], N-1, N)
cov_sum = matrix(cov_sum_1 + cov_sum_2, N-1, N)
cov_APE = shift_lower_triangle_and_add_zero_diag(cov_APE)
cov_APE_minus = shift_lower_triangle_and_add_zero_diag(cov_APE_minus)
cov_sum = shift_lower_triangle_and_add_zero_diag(cov_sum)
cov_sum[row(cov_sum) == col(cov_sum)] = 0
cov_APE[row(cov_APE) == col(cov_APE)] = 0
cov_APE_minus[row(cov_APE_minus) == col(cov_APE_minus)] = 0
XB_pi <- cov_sum
Phi_XB <- pnorm(cov_sum)  # CDF (Φ(Xβ))
phi_XB <- dnorm(cov_sum)  # PDF (φ(Xβ))
Phi_XB <- pmax(Phi_XB, 1e-9)
Phi_XB <- pmin(Phi_XB, 1 - 1e-9)
# preparation for ingredients
# d_fix_loss = y - exp(cov_sum)/( 1 + exp(cov_sum))
d_fix_loss = - (phi_XB * (y - Phi_XB) / (Phi_XB * (1 - Phi_XB)))
#d_fix_2_loss = - exp(cov_sum)/( 1 + exp(cov_sum))^2
d_fix_2_loss = (-cov_sum*phi_XB  *Phi_XB * ( 1 -Phi_XB ) - phi_XB*(1-2*Phi_XB)*phi_XB)*(y-Phi_XB)/((Phi_XB*(1-Phi_XB)))^2 - phi_XB^2  / ((Phi_XB*(1-Phi_XB)))
# d_beta_loss = X * (y - exp(cov_sum)/( 1 + exp(cov_sum)))
d_beta_loss = -X * (phi_XB * (y - Phi_XB) / (Phi_XB * (1 - Phi_XB)))
# d_beta_beta_loss = X * (- exp(cov_sum)/( 1 + exp(cov_sum))^2) * X
d_beta_beta_loss = (-cov_sum*phi_XB * X *Phi_XB * ( 1 -Phi_XB ) - phi_XB*(1-2*Phi_XB)*X*phi_XB)*(y-Phi_XB)/((Phi_XB*(1-Phi_XB)))^2 - X * phi_XB^2 * X / ((Phi_XB*(1-Phi_XB)))
# d_beta_fix_loss = X * ( - exp(cov_sum)/( 1 + exp(cov_sum))^2)
d_beta_fix_loss = (-cov_sum*phi_XB * X *Phi_XB * ( 1 -Phi_XB ) - phi_XB*(1-2*Phi_XB)*phi_XB)*(y-Phi_XB)/((Phi_XB*(1-Phi_XB)))^2 - X * phi_XB^2  / ((Phi_XB*(1-Phi_XB)))
d_fix_APE =  (1/sqrt(2*pi) * exp( -cov_APE^2 / 2 ) - 1/sqrt(2*pi) * exp( -cov_APE_minus^2 / 2 ))/2
d_beta_APE = (1/sqrt(2*pi) * exp( -cov_APE^2 / 2 ) + 1/sqrt(2*pi) * exp( -cov_APE_minus^2 / 2 ))/2
# Hessian matrix
H_a_a = -diag(rowSums(d_fix_2_loss))/sqrt(N*(N-1))
H_g_g = -diag(colSums(d_fix_2_loss))/sqrt(N*(N-1))
H_a_g = -d_fix_2_loss/sqrt(N*(N-1))
Hessian_bar =   cbind(rbind(H_a_a, t(H_a_g)), rbind(H_a_g, H_g_g))  + c(rep(1,N), rep(-1,N)) %*% t( c(rep(1,N), rep(-1,N)) )/sqrt(N*(N-1))
Hessain_inverse = solve(Hessian_bar)
Hessian_a_a = Hessain_inverse[1:(N), 1:(N)]
Hessian_g_a = Hessain_inverse[(N+1):(N+N), 1:(N)]
Hessian_a_g = Hessain_inverse[1:(N), (N+1):(N+N)]
Hessian_g_g = Hessain_inverse[(N+1):(N+N), (N+1):(N+N)]
# the matrix
the = matrix(0,N,N)
for (i in 1:N) {
for (j in 1:N) {
the[i,j] = -(sum(Hessian_a_a[i,]*colSums(d_beta_fix_loss)) +
sum(Hessian_g_a[j,]*colSums(d_beta_fix_loss)) +
sum(Hessian_a_g[i,]*rowSums(d_beta_fix_loss)) +
sum(Hessian_g_g[j,]*rowSums(d_beta_fix_loss)))/sqrt(N*(N-1))
}
}
# W_infity
W_bar =  -(1 / sqrt((N)*N)) * sum(  d_beta_beta_loss  - d_fix_2_loss * the * the  )
# phi matrix
phi = matrix(0, N, N)
for (i in 1:(N)) {
for (j in 1:N) {
phi[i,j] = -(sum(Hessian_a_a[i,]*colSums(d_fix_APE)) +
sum(Hessian_g_a[j,]*colSums(d_fix_APE)) +
sum(Hessian_a_g[i,]*rowSums(d_fix_APE)) +
sum(Hessian_g_g[j,]*rowSums(d_fix_APE)))/sqrt(N*(N-1))
}
}
D_beta_delta = (1/((N-1)*N)) * sum( d_beta_APE - the * d_fix_APE)
D_beta_loss = d_beta_loss - d_fix_loss*the
D_beta_dix_loss = d_beta_fix_loss - d_fix_2_loss*the
tau = as.numeric(D_beta_delta * solve(W_bar)) * D_beta_loss - phi * d_fix_loss
APE_residual = APE - colMeans(APE)
part_1 = sum(APE_residual%*%APE_residual)
part_2 = compute_sum(APE_residual)
part_3 = sum(tau*tau)
return( sqrt((part_1 + part_2 + part_3)/(N^2*(N-1)^2)) )
}
#' @export
compute_sum <- function(X) {
N <- nrow(X)
col_sums <- colSums(X)  # Compute sum over each column
term1 <- X * matrix(rep(col_sums, each = N), nrow = N)  # X_{it} * sum(X_{jt})
term2 <- sum(X * X)  # Subtract diagonal terms (i = j)
return(sum(term1) - term2)
}
#' @export
shift_lower_triangle_and_add_zero_diag <- function(A) {
N_minus_1 <- nrow(A)
N <- ncol(A)
if (N_minus_1 != N - 1) {
stop("Input matrix must be of size (N-1) x N.")
}
# Initialize an N x N zero matrix
A_new <- matrix(0, nrow = N, ncol = N)
# Copy upper triangle (including diagonal) from A
for (i in 1:N_minus_1) {
for (j in i:N) {
if (i != j) {  # Exclude diagonal to enforce 0s
A_new[i, j] <- A[i, j]
}
}
}
# Shift lower-left triangle (strictly below diagonal) down by 1 row
for (i in 2:N_minus_1) {
for (j in 1:(i - 1)) {
A_new[i, j] <- A[i - 1, j]
}
}
# Final row: only shifted lower-left values
for (j in 1:(N - 1)) {
A_new[N, j] <- A[N - 1, j]
}
# Diagonal explicitly set to 0 (optional, for safety)
diag(A_new) <- 0
return(A_new)
}
